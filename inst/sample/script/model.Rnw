\input{settings.sty}
\usepackage{Sweave}
\SweaveOpts{keep.source=true}
\SweaveOpts{eps=false} 
\begin{document}
\vspace*{2cm}
\begin{center}
{\Large MIfuns Sample Script}\\
\vspace{1.5cm}
{\Large Phase I Modeling}\\
~\\
\today\\
~\\
Tim Bergsma\\
\end{center}
\newpage

\section{Purpose}
This script runs NONMEM models and diagnostics for sample phase1 data.
\section{Model Development}
\subsection{Set up for NONMEM run.}
<<model>>=
getwd()
library(MIfuns)
library(lattice)
command <- '/common/NONMEM/nm7_osx1/test/nm7_osx1.pl'
cat.cov='SEX'
cont.cov=c('HEIGHT','WEIGHT','AGE')
par.list=c('CL','Q','KA','V','V2','V3')
eta.list=paste('ETA',1:10,sep='')
@
\subsection{Run NONMEM.}
To force a re-run of this model, delete 1005/diagnostics.pdf.
<<run>>=
if(!file.exists('../nonmem/1005/diagnostics.pdf'))NONR(
     run=1005,
     command=command,
     project='../nonmem',
     grid=TRUE,
     nice=TRUE,
     checkrunno=FALSE,
     cont.cov=cont.cov,
     cat.cov=cat.cov,
     par.list=par.list,
     eta.list=eta.list,
     plotfile='../nonmem/*/diagnostics.pdf',
     streams='../nonmem/ctl'
)
getwd()
while(!file.exists('../nonmem/1005/diagnostics.pdf')){}
@
Covariance succeeded on model 1005.
\section{Predictive Check}
\subsection{Create a simulation control stream.}
<<predict>>=
t <- metaSub(
     as.filename('../nonmem/ctl/1005.ctl'),
     names=1105,
     pattern= '\\$THETA.*',
     replacement=paste(
         sep='\n',
         '$MSFI=../1005/1005.msf',
         ';$OMEGA',
         ';$SIGMA',
         '$SIMULATION ONLYSIM (1968) SUBPROBLEMS=500',
         ';$COV',
         '$TABLE DV NOHEADER NOPRINT FILE=./*.tab FORWARD NOAPPEND'
    ),
    fixed=FALSE,
    out='../nonmem/ctl',
    suffix='.ctl'
)
@
\subsection{Run the simulation.}
This run makes the predictions (simulations).
<<sim>>=
if(!file.exists('../nonmem/1105/1105.lst'))NONR(
     run=1105,
     command=command,
     project='../nonmem',
     grid=TRUE,
     nice=TRUE,
     diag=FALSE,
     streams='../nonmem/ctl'
)
getwd()
while(!file.exists('../nonmem/1105/1105.lst')){}
@
\subsection{Recover and format the original dataset.}
Now we fetch the results and integrate them with the other data.
<<fetch>>=   
phase1 <- read.csv('../data/derived/phase1.csv',na.strings='.')
head(phase1)
phase1 <- phase1[is.na(phase1$C),c('SUBJ','TIME','DV')]
records <- nrow(phase1)
records
phase1 <- phase1[rep(1:records,500),]
nrow(phase1)
phase1$SIM <- rep(1:500,each=records)
#head(phase1,300)
with(phase1,DV[SIM==1 & SUBJ==12])
with(phase1,DV[SIM==2 & SUBJ==12])
@
\subsection{Recover and format the simulation results.}
<<preds>>=
pred <- scan('../nonmem/1105/1105.tab')
nrow(phase1)
length(pred)
@ 
\subsection{Combine the original data and the simulation data.}
<<combine>>=
phase1$PRED <- pred
head(phase1)
phase1 <- phase1[!is.na(phase1$DV),]
head(phase1)
@
\subsection{Plot predictive checks.}
\subsubsection{Aggregate data within subject.}
Since subjects may contribute differing numbers of observations, it may
be useful to look at predictions from a subject-centric perspective.
Therefore, we wish to calculate summary statistics for each subject, 
(observed and predicted) and then make obspred comparisons therewith.
<<subject>>=
library(reshape)
head(phase1)
subject <- melt(phase1,measure.var=c('DV','PRED'))
head(subject)
@
We are going to aggregate each subject's DV and PRED values using cast().
cast() likes an aggregation function that returns a list.
We write one that grabs min med max for each subject, sim, and variable.
<<metrics>>=
metrics <- function(x)list(min=min(x), med=median(x), max=max(x))
@
Now we cast, ignoring time.
<<cast>>=
subject <- data.frame(cast(subject, SUBJ + SIM + variable ~ .,fun=metrics))
head(subject)
@
Note that regardless of SIM, DV (observed) is constant.

Now we melt the metrics.
<<metrics>>=
metr <- melt(subject,measure.var=c('min','med','max'),variable_name='metric')
head(metr)
@
\subsubsection{Aggregate data across subjects, within simulations.}
Our predictions have central tendencies, which can vary by SIM.
Thus, our metrics as well have central tendencies that vary by SIM.
We want to represent the variability across SIMS by aggregating within SIM.
That means aggregating across subjects, within SIMS.  
There are many aggregation strategies, but we choose quantiles for a non-parametric 
result. Quantiles that 'clip' the tails of the distribution offer robustness against
number of SIMS (i.e., results less dependent on number of sims).  
Within each SIM, let's find for each metric the 5th, 50th, and 95th percentile.
We also want to do this for the original data set (requires some minor rearrangement).
<<acrossSubject>>=
head(metr)
quants <- data.frame(cast(metr,SIM + metric + variable ~ .,fun=quantile,probs=c(0.05,0.50,0.95)))
head(quants,10)
@
Note, again, that DV quantiles are invariant across SIMS.
\subsubsection{Reformat data for bivariate display.}
We now have a lot of display options.  The simplest is to plot DV~PRED for each quantile and metric.
Requires slight rearrangement.
<<logLogByMetric>>=
molten <- melt(quants, measure.var=c('X5.','X50.','X95.'),variable_name='quant')
head(molten)
frozen <- data.frame(cast(molten, SIM + metric + quant ~ variable))
head(frozen)
@
\subsubsection{Bivariate display of within-simulation aggregate metrics.}
<<bivariate,fig=TRUE>>=
print(xyplot(
	log(PRED)~log(DV)|metric,
	frozen,
	groups=quant,
	layout=c(1,3),
	auto.key=TRUE,
	panel=function(...){
		panel.xyplot(...)
		panel.abline(a=0,b=1)
	}
))
@
\subsubsection{Univariate displays.}
For a better view of the distributions, however, we can work with single-axis plot functions,
using the molten data.  For faster and clearer plotting, we remove duplicates of DV.
\subsubsection{Classic stripplot}
<<stripplot,fig=TRUE>>=
head(molten)
molten$SIM <- NULL
table(molten$variable)
molten <- molten[!(duplicated(molten[,c('metric','variable','quant')]) & molten$variable=='DV'),]
table(molten$variable)
library(grid)
print(stripplot(
	~value|metric+quant,
	molten,
	groups=variable,
	horizontal=TRUE,
	auto.key=TRUE,
	panel=panel.superpose,
	alpha=0.5,
	panel.groups=panel.stripplot
))
@
\subsubsection{Diamondback: reference regions on density strips}
Here we show the distribution data as density strips, and indicate reference 
regions around the point estimates. Here is one option. Also try swapping `quant' and 
`metric'.
<<diamondBack,fig=TRUE>>=
print(stripplot(
	quant~value|metric,
	molten,
	groups=variable,
	auto.key=TRUE,
	panel=panel.stratify,
	alpha=0.5,
	layout=c(1,3),
	scales=list(relation='free'),
	panel.levels = function(x,y,group.number,col,col.line,fill,font,...){
		if(group.number==1)for(d in seq(length.out=length(x))) panel.polygon(
			x=x[[d]]*c(0.8,1,1.25,1),
			y=y[[d]] + c(0.25,0,0.25,0.5),
			border=col.line,
			col=fill,
			...
		)
		else panel.densitystrip(x=x,y=y,col=fill,border=col.line,...)
	}
))
@
\section{Bootstrap Estimates of Parameter Uncertainty}
\subsection{Create directories.}
<<bootstrap>>=
getwd()
dir.create('../nonmem/1005.boot')
dir.create('../nonmem/1005.boot/data')
dir.create('../nonmem/1005.boot/ctl')
@
\subsection{Create replicate control streams.}
<<control>>=
t <- metaSub(
     clear(readLines('../nonmem/ctl/1005.ctl'),';.+',fixed=FALSE),
     names=1:300,
     pattern=c(
         '1005',
         '../../data/derived/phase1.csv',
         '$COV',
         '$TABLE'
     ),
     replacement=c(
         '*',
         '../data/*.csv',
         ';$COV',
         ';$TABLE'
    ),
    fixed=TRUE,
    out='../nonmem/1005.boot/ctl',
    suffix='.ctl'
 )
@
\subsection{Create replicate data sets by resampling original.}
<<resample>>=
 bootset <- read.csv('../data/derived/phase1.csv')
 r <- resample(
 	bootset,
 	names=1:300,
 	key='ID',
 	rekey=TRUE,
 	out='../nonmem/1005.boot/data',
 	stratify='SEX'
 )
@
\subsection{Run bootstrap models.}
To force a re-run of bootstraps, delete log.csv.
<<boot>>=
if(!file.exists('../nonmem/1005.boot/CombRunLog.csv'))NONR(
     run=1:300,
     command=command,
     project='../nonmem/1005.boot/',
     boot=TRUE,
     nice=TRUE,
     streams='../nonmem/1005.boot/ctl'
)
getwd()  
@
\subsection{Summarize bootstrap models.}
When the bootstraps are complete, we return here and summarize. If you 
do not have time for bootstraps, use read.csv() on ../nonmem/1005.boot/log.csv.
<<more>>= 
#boot <- read.csv('../nonmem/1005.boot/log.csv',as.is=TRUE)
#wait for bootstraps to finish
while(!(all(file.exists(paste(sep='','../nonmem/1005.boot/',1:300,'.boot/',1:300,'.lst'))))){}
if(file.exists('../nonmem/1005.boot/log.csv')){
    boot <- read.csv('../nonmem/1005.boot/log.csv',as.is=TRUE)
}else{
    boot <- rlog(
	run=1:300,
	project='../nonmem/1005.boot',
	boot=TRUE,
	append=FALSE,
	tool='nm7'
    )
    write.csv(boot, '../nonmem/1005.boot/log.csv')
}
head(boot)
unique(boot$parameter)
text2decimal(unique(boot$parameter))
@
It looks like we have 14 estimated parameters.  We will map them to the
original control stream.
<<pars>>=
boot <- boot[!is.na(text2decimal(boot$parameter)),]
head(boot)
unique(boot$moment)
unique(boot$value[boot$moment=='prse'])
@
prse, and therefore moment, is noninformative for these bootstraps.
<<drop>>=
boot <- boot[boot$moment=='estimate',]
boot$moment <- NULL
unique(boot$tool)
boot$tool <- NULL
head(boot)
unique(boot$value[boot$parameter %in% c('OMEGA2.1','OMEGA3.1','OMEGA3.2')])
unique(boot$parameter[boot$value=='0'])
@
Off-diagonals (and only off-diagonals) are noninformative.
<<off>>=
boot <- boot[!boot$value=='0',]
any(is.na(as.numeric(boot$value)))
boot$value <- as.numeric(boot$value)
head(boot)
@
\subsection{Restrict data to 95 percentiles.}
We did 300 runs.  Min and max are strongly dependent on number of runs, since 
with an unbounded distribution, (almost) any value is possible with enough sampling.
We clip to the 95 percentiles, to give distributions that are somewhat more
scale independent.
<<clip>>=
boot$upper <- with(boot,reapply(value,INDEX=parameter,FUN=quantile,probs=0.975))
boot$lower <- with(boot,reapply(value,INDEX=parameter,FUN=quantile,probs=0.025))
nrow(boot)
boot <- boot[with(boot, value < upper & value > lower),]
nrow(boot)
head(boot)
boot$upper <- NULL
boot$lower <- NULL
head(boot)
@
\subsection{Recover parameter metadata from a specially-marked control stream.}
We want meaningful names for our parameters.  Harvest these from a reviewed control
stream.
<<ctl2xml>>=
stream <- readLines('../nonmem/ctl/1005.ctl')
tail(stream)
doc <- ctl2xml(stream)
doc
params <- unique(boot[,'parameter',drop=FALSE])
params$defs <- lookup(params$parameter,within=doc)
params$labels <- lookup(params$parameter,within=doc,as='label')
params
boot$parameter <- lookup(boot$parameter,within=doc,as='label')
head(boot)
@
\subsection{Create covariate plot.}
Now we make a covariate plot for clearance.  We will normalize clearance 
by its median (we also could have used the model estimate).  We need to take 
cuts of weight, since we can only really show categorically-constrained distributions.
Male effect is already categorical.  I.e, the reference individual has median
clearance, is female, and has median weight.
\subsubsection{Recover original covariates for guidance.}
<<covs>>=
covariates <- read.csv('../data/derived/phase1.csv',na.strings='.')
head(covariates)
with(covariates,constant(WEIGHT,within=ID))
covariates <- unique(covariates[,c('ID','WEIGHT')])
head(covariates)
covariates$WT <- as.numeric(covariates$WEIGHT)
wt <- median(covariates$WT)
wt
range(covariates$WT)
@
\subsubsection{Reproduce the control stream submodel for selective cuts of a continuous covariate.}
In the model we normalized by 70 kg, so that cut will have null effect.
Let's try 65, 75, and 85 kg. We have to make a separate column for each
cut, which is a bit of work. Basically, we make two more copies of our
weight effect columns, and raise our normalized cuts to those powers, 
effectively reproducing the submodel from the control stream.
<<cuts>>=
head(boot) 
unique(boot$parameter)
clearance <- boot[boot$parameter %in% c('CL/F','WT.CL','Male.CL'),]
head(clearance)
frozen <- data.frame(cast(clearance,run~parameter),check.names=FALSE)
head(frozen)
frozen$WT.CL65 <- (65/70)**frozen$WT.CL
frozen$WT.CL75 <- (75/70)**frozen$WT.CL
frozen$WT.CL85 <- (85/70)**frozen$WT.CL
@
\subsubsection{Normalize key parameter}
<<key>>=
cl <- median(boot$value[boot$parameter=='CL/F'])
cl
head(frozen)
frozen[['CL/F']] <- frozen[['CL/F']]/cl
head(frozen)
frozen$WT.CL <- NULL
molten <- melt(frozen,id.var='run',na.rm=TRUE)
head(molten)
@
\subsubsection{Plot.}
Now we plot.  We reverse the variable factor to give us top-down layout
of strips.
<<covplot,fig=TRUE>>=
levels(molten$variable)
molten$variable <- factor(molten$variable,levels=rev(levels(molten$variable)))
print(stripplot(variable~value,molten,panel=panel.covplot))
@
\subsubsection{Summarize}
We see that clearance is estimated with good precision.  Ignoring outliers, there 
is not much effect on clearance of being male, relative to female.  Increasing 
weight is associated with increasing clearance.  There is a 79 percent probability
that an 85 kg person will have at least 25 percent greater clearance than a 70 kg
person.
\section{Parameter Table}
<<params>>=
library(Hmisc)
tab <- partab(1005,'../nonmem',tool='nm7',as=c('label','latex','model','estimate','unit','prse'))
tab$estimate <- as.character(signif(as.numeric(tab$estimate),3))
tab$estimate <- ifelse(is.na(tab$unit),tab$estimate,paste(tab$estimate, tab$unit))
tab$unit <- NULL
tab$label <- ifelse(is.na(tab$latex),tab$label,paste(tab$label, ' (',tab$latex,')',sep=''))
tab$latex <- NULL
names(tab)[names(tab)=='label'] <- 'parameter'
tab$root <- signif(sqrt(exp(as.numeric(tab$estimate))-1),3)
tab$estimate <- ifelse(contains('Omega|sigma',tab$parameter),paste(tab$estimate,' (\\%CV=',tab$root*100,')',sep=''),tab$estimate)
tab$root <- NULL
#offdiag <- contains('2.1',tab$parameter)
#tab$estimate[offdiag] <- text2decimal(tab$estimate[offdiag])
#omegablock <- text2decimal(tab$estimate[contains('Omega..(1|2)',tab$parameter)])
#cor <- signif(half(cov2cor(as.matrix(as.halfmatrix(omegablock))))[[2]],3)
#tab$estimate[offdiag] <- paste(sep='',tab$estimate[offdiag],' (COR=',cor,')')
tab$model[is.na(tab$model)] <- ''
#boot <- rlog(1:300,project='../nonmem/1005.boot',tool='nm7',boot=TRUE)
boot <- read.csv('../nonmem/1005.boot/log.csv',as.is=TRUE)
boot <- boot[boot$moment=='estimate',]
boot <- data.frame(cast(boot,...~moment))
boot[] <- lapply(boot,as.character)
boot <- boot[contains('THETA|OMEGA|SIGMA',boot$parameter),c('parameter','estimate')]
boot$estimate <- as.numeric(boot$estimate)
boot <- data.frame(cast(boot,parameter~.,value='estimate',fun=function(x)list(lo=as.character(signif(quantile(x,probs=0.05),3)),hi=as.character(signif(quantile(x,probs=0.95),3)))))
boot$CI <- with(boot, paste(sep='','(',lo,',',hi,')'))
names(boot)[names(boot)=='parameter'] <- 'name'
tab <- stableMerge(tab,boot[,c('name','CI')])
tab$name <- NULL
@ 
<<results=tex,echo=FALSE>>=
latex(
	tab,
	file='',
	rowname=NULL,
	caption='Parameter Estimates from Population Pharmacokinetic Model Run 1005',
	caption.lot='Model 10o5 Parameters',
	label='p1005',
	where='ht',
	table.env=FALSE
)
@
\end{document}
